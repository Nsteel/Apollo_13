#!/usr/bin/env python
PACKAGE = "lane_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("horizon_percentage",              double_t,   0, "Percentage of the image occupied by the background (horizon)",  41.6, 10, 90)
gen.add("hough_threshold_left_ROI",        int_t,      0, "Threshold for the Hough Lines Transformation (Left ROI)", 50, 30, 300)
gen.add("hough_threshold_right_ROI",       int_t,      0, "Threshold for the Hough Lines Transformation (Right ROI)", 50, 30, 300)
gen.add("max_distance_to_vanishing_point", int_t,      0, "Max allowed distance to the vanishing point, in order to consider a line as lane canditate", 50, 0, 300)
gen.add("max_cluster_angle",    double_t,   0, "Max allowed angle between two line, in order to merge them", 8, 0, 45)
gen.add("max_lane_diff",        int_t,      0, "Max allowed distance difference from the current lanes to the last detected lanes, in order to consider the current iteration as valid", 60, 0, 300)
gen.add("min_slopeAngle_left",  double_t,   0, "Min allowed slope angle (degrees) for the left lane", 35, 0, 180)
gen.add("max_slopeAngle_left",  double_t,   0, "Max allowed slope angle (degrees) for the left lane", 90, 0, 180)
gen.add("min_slopeAngle_right", double_t,   0, "Min allowed slope angle (degrees) for the right lane", 105, 0, 180)
gen.add("max_slopeAngle_right", double_t,   0, "Max allowed slope angle (degrees) for the right lane", 150, 0, 180)

image_enum = gen.enum([ gen.const("Original",      int_t, 0, "The original image"),
                       gen.const("Preprocessed",     int_t, 1, "The image after Canny and without background"),
                       gen.const("Left_ROI",      int_t, 2, "Left region of interest"),
                       gen.const("Right_ROI", int_t, 3, "Right region of interest")],
                     "An enum to set the image")

gen.add("image", int_t, 0, "Image to display", 0, 0, 3, edit_method=image_enum)

exit(gen.generate(PACKAGE, "lane_detector", "Detector"))
