#!/usr/bin/env python
PACKAGE = "automap"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("planner_robot_width", double_t,   0, "width of the robot(m), used for collision avoidance", 0.25, 0, 2)
gen.add("planner_robot_length", double_t,   0, "length of the robot(m), used for collision avoidance", 0.4, 0, 2)
gen.add("planner_downsampling_factor", double_t,   0, "downsampling of the occupancy grid, increases performance", 0.2, 0, 1)
gen.add("planner_min_obstacle_distance", double_t,   0, "minimum allowed distance to obstacles(m)", 0.4, 0, 2)
gen.add("planner_alpha", double_t,   0, "scales how strongly obstacles may influence path planning", 1.0, 0, 2)

gen.add("frontier_tolerance", double_t,   0, "ignores gaps bigger than the diagonal of the robot footprint multiplied by this factor", 1.2, 0, 10)
gen.add("frontier_dilation_rate", int_t,   0, "inflates detected objects to ensure clean removal from frontiers", 3, 0, 10)
gen.add("frontier_blur_kernel", int_t,   0, "smoothens the map to remove micro holes produced by a range sensor", 5, 0, 10)
gen.add("frontier_inflate_frontiers", bool_t,   0, "enlarges frontiers to connect adjacent frontiers separated by noise", True)

gen.add("exploration_rolling_window_width", double_t,   0, "width(m) of the local exploration perspective", 22, 0, 200)
gen.add("exploration_rolling_window_height", double_t,   0, "height(m) of the local exploration perspective", 22, 0, 200)

gen.add("exploration_score_simple_dist_exp", double_t,   0, "exponent of the distance weight function", 4, 0, 10)
gen.add("exploration_score_simple_dist_base", double_t,   0, "base of the distance weight function", 2, 0, 10)
gen.add("exploration_score_simple_angle_exp", double_t,   0, "exponent of the view angle weight function", 4, 0, 10)
gen.add("exploration_score_simple_angle_base", double_t,   0, "base of the view angle weight function", 2, 0, 10)

gen.add("exploration_score_nbv_sampling_points", int_t,   0, "number of random generated sampling points per frontier", 25, 0, 200)
gen.add("exploration_score_nbv_sensor_min_range", double_t,   0, "minimum sensing distance(m) of the range sensor", 1, 0, 30)
gen.add("exploration_score_nbv_sensor_max_range", double_t,   0, "maximum sensing distance(m) of the range sensor", 7, 0, 30)
gen.add("exploration_score_nbv_sensor_angular_accuracy", double_t,   0, "angular sensing accuracy(deg) of the range sensor", 0.1, 0.01, 360)
gen.add("exploration_score_nbv_sensor_fov", double_t,   0, "FOV of the range sensor", 70, 0, 360)
gen.add("exploration_score_nbv_angular_scan_accuracy", double_t,   0, "angular sensing accuracy(deg) used in sampling on a specific frontier", 10.0, 0.01, 360)
gen.add("exploration_score_nbv_angular_scan_range", double_t,   0, "maximum angular range(deg) to be sampled on a specific frontier", 180, 0, 360)
gen.add("exploration_score_nbv_obstacle_inflation", int_t,   0, "prevents escaping rays during sampling operations", 2, 0, 10)
gen.add("exploration_score_nbv_alpha", double_t,   0, "weight of distance in the exponent of the scoring function", 0.10, 0.0, 10)
gen.add("exploration_score_nbv_beta", double_t,   0, "weight of angledifferential in the exponent of the scoring function", 1.5, 0.0, 10)

gen.add("exploration_score_nbv_distance_thresh", double_t,   0, "above this distance(m) view angle is ignored", 8, 0, 200)

gen.add("exploration_goal_accuracy_position", double_t,   0, "a distance(m) threshold below which a frontier is viewed as reached", 1.0, 0, 200)
gen.add("exploration_goal_accuracy_angle", double_t,   0, "an angular(rad) threshold below which a frontier is viewed as reached", 0.5, 0, 6.3)

gen.add("node_retries", int_t,   0, "number of exploration retries before a new exploration is forced", 30, 0, 100)
gen.add("node_information_gain", double_t,   0, "minimum required amount of information gained before a new exploration is planned", 3500, 0, 100000)
gen.add("node_loop_rate", double_t,   0, "frequency of the main loop(hz)", 2.0, 0, 100)

exit(gen.generate(PACKAGE, "automap", "Exploration"))
