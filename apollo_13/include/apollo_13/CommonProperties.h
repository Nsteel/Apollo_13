/* Auto-generated by genmsg_cpp for file /home/pses/catkin_ws/src/rososc/touchosc_msgs/msg/CommonProperties.msg */
#ifndef TOUCHOSC_MSGS_MESSAGE_COMMONPROPERTIES_H
#define TOUCHOSC_MSGS_MESSAGE_COMMONPROPERTIES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace touchosc_msgs
{
template <class ContainerAllocator>
struct CommonProperties_ {
  typedef CommonProperties_<ContainerAllocator> Type;

  CommonProperties_()
  : tabpage()
  , name()
  , x(0)
  , y(0)
  , width(0)
  , height(0)
  , visible()
  , color()
  {
  }

  CommonProperties_(const ContainerAllocator& _alloc)
  : tabpage(_alloc)
  , name(_alloc)
  , x(0)
  , y(0)
  , width(0)
  , height(0)
  , visible(_alloc)
  , color(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tabpage_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  tabpage;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef int16_t _x_type;
  int16_t x;

  typedef int16_t _y_type;
  int16_t y;

  typedef uint16_t _width_type;
  uint16_t width;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _visible_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  visible;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _color_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  color;


  typedef boost::shared_ptr< ::touchosc_msgs::CommonProperties_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::touchosc_msgs::CommonProperties_<ContainerAllocator>  const> ConstPtr;
}; // struct CommonProperties
typedef  ::touchosc_msgs::CommonProperties_<std::allocator<void> > CommonProperties;

typedef boost::shared_ptr< ::touchosc_msgs::CommonProperties> CommonPropertiesPtr;
typedef boost::shared_ptr< ::touchosc_msgs::CommonProperties const> CommonPropertiesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::touchosc_msgs::CommonProperties_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::touchosc_msgs::CommonProperties_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace touchosc_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::touchosc_msgs::CommonProperties_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::touchosc_msgs::CommonProperties_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::touchosc_msgs::CommonProperties_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c6057f4de35b509307640ef1d0f3aac";
  }

  static const char* value(const  ::touchosc_msgs::CommonProperties_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2c6057f4de35b509ULL;
  static const uint64_t static_value2 = 0x307640ef1d0f3aacULL;
};

template<class ContainerAllocator>
struct DataType< ::touchosc_msgs::CommonProperties_<ContainerAllocator> > {
  static const char* value() 
  {
    return "touchosc_msgs/CommonProperties";
  }

  static const char* value(const  ::touchosc_msgs::CommonProperties_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::touchosc_msgs::CommonProperties_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Common functionality to all TouchOSC controls\n\
\n\
string tabpage          # Control tabpage\n\
string name             # Control Name\n\
int16 x                 # X position of the control\n\
int16 y                 # Y position of the control\n\
uint16 width            # Width of the control\n\
uint16 height           # Height of the control\n\
string visible          # Visibility of the control\n\
\n\
# Possible colors are:\n\
# \"red\", \"green\", \"blue\", \"yellow\", \"orange\", \"purple\", \"gray\"\n\
string color            # Color of the control\n\
\n\
";
  }

  static const char* value(const  ::touchosc_msgs::CommonProperties_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::touchosc_msgs::CommonProperties_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.tabpage);
    stream.next(m.name);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.visible);
    stream.next(m.color);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CommonProperties_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::touchosc_msgs::CommonProperties_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::touchosc_msgs::CommonProperties_<ContainerAllocator> & v) 
  {
    s << indent << "tabpage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tabpage);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "visible: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.visible);
    s << indent << "color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.color);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TOUCHOSC_MSGS_MESSAGE_COMMONPROPERTIES_H

