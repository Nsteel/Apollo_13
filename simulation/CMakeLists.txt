set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
cmake_minimum_required(VERSION 2.8.3)
project(simulation)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
#INCLUDE_DIRECTORIES("/usr/include/qt5/")
find_package(catkin REQUIRED COMPONENTS
  roscpp
  roslib
  rospack
  std_msgs
  nav_msgs
  sensor_msgs
  tf
  message_generation
  dynamic_reconfigure
)
find_package(OpenCV REQUIRED)
#find_package(Qt5 REQUIRED COMPONENTS Core Gui)
find_package(Qt5Widgets)
find_package(Qt5Core)
find_package(Qt5Gui)

set( QT_USE_QTGUI TRUE )
set( QT_USE_QTOPENGL TRUE )
set( QT_USE_QTXML TRUE )
#include(${QT_USE_FILE})
## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a run_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   ctrl_msg.msg
   telemetry_msg.msg
 )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs
   geometry_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a run_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
 generate_dynamic_reconfigure_options(
    cfg/RangeSensor.cfg
 )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES simulation
  CATKIN_DEPENDS message_runtime std_msgs geometry_msgs
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(include)
include_directories(include ${catkin_INCLUDE_DIRS})
include_directories(include ${OpenCV_INCLUDE_DIRS})
#include_directories(include ${Qt5_INCLUDE_DIRS})
QT5_WRAP_UI(UIS_HDRS include/Dashboard.ui)


## Declare a C++ library
#add_library(simulation
#   src/${PROJECT_NAME}/src/simulation_control.cpp
# )
add_library(RANGE_SENSOR src/RangeSensor.cpp)
add_library(CAR_MODEL src/CarModel.cpp)
add_library(FWD_KINEMATICS src/ForwardKinematics.cpp)
add_library(DASH include/Dashboard.cpp ${UIS_HDRS})

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(simulation ${${PROJECT_NAME}_EXPORTED_TARGETS ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
add_executable(simulation_node src/simulation_control.cpp)
add_executable(scan_node src/simulation_laserscan.cpp)
add_executable(usrange_node src/simulation_usscan.cpp)
add_executable(dashboard_node src/simulation_dashboard.cpp ${UIS_HDRS})

add_dependencies(simulation_node ${${PROJECT_NAME}_EXPORTED_TARGETS})
add_dependencies(simulation_node ${PROJECT_NAME}_gencpp)
add_dependencies(scan_node ${PROJECT_NAME}_gencfg)
add_dependencies(usrange_node ${PROJECT_NAME}_gencfg)
add_dependencies(RANGE_SENSOR ${PROJECT_NAME}_gencfg)
add_dependencies(DASH ${PROJECT_NAME}_gencpp)



## Add cmake target dependencies of the executable
## same as for the library above
#add_dependencies(simulation_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
 target_link_libraries(simulation_node
   ${catkin_LIBRARIES} CAR_MODEL FWD_KINEMATICS
 )
 target_link_libraries(scan_node
   ${catkin_LIBRARIES} ${OpenCV_LIBS} yaml-cpp RANGE_SENSOR
 )
 target_link_libraries(usrange_node
   ${catkin_LIBRARIES} ${OpenCV_LIBS} yaml-cpp RANGE_SENSOR
 )
#target_link_libraries(dashboard_node ${catkin_LIBRARIES} ${Qt5_LIBRARIES} Qt5::Widgets Qt5::Core Qt5::Gui DASH)
target_link_libraries(DASH Qt5::Widgets Qt5::Core Qt5::Gui)
target_link_libraries(dashboard_node ${catkin_LIBRARIES} DASH Qt5::Widgets Qt5::Core Qt5::Gui)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS simulation simulation_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Enabling C++11##
#############
include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
elseif(COMPILER_SUPPORTS_CXX0X)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
else()
        message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_simulation.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
