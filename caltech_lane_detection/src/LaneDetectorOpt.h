/* LaneDetectorOpt.h */

/* File autogenerated by gengetopt version 2.18  */

#ifndef LANEDETECTOROPT_H
#define LANEDETECTOROPT_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef LANEDETECTORPARSER_PACKAGE
#define LANEDETECTORPARSER_PACKAGE "LaneDetector"
#endif

#ifndef LANEDETECTORPARSER_VERSION
#define LANEDETECTORPARSER_VERSION "0.1"
#endif

struct LaneDetectorParserInfo
{
  const char *help_help; /* Print help and exit help description.  */
  const char *version_help; /* Print version and exit help description.  */
  int ipmWidth_arg;	/* width of IPM image to use.  */
  char * ipmWidth_orig;	/* width of IPM image to use original value given at command line.  */
  const char *ipmWidth_help; /* width of IPM image to use help description.  */
  int ipmHeight_arg;	/* height of IPM image to use.  */
  char * ipmHeight_orig;	/* height of IPM image to use original value given at command line.  */
  const char *ipmHeight_help; /* height of IPM image to use help description.  */
  int ipmTop_arg;	/* Top point in original image of region to make IPM for.  */
  char * ipmTop_orig;	/* Top point in original image of region to make IPM for original value given at command line.  */
  const char *ipmTop_help; /* Top point in original image of region to make IPM for help description.  */
  int ipmLeft_arg;	/* Left point in original image of region to make IPM for.  */
  char * ipmLeft_orig;	/* Left point in original image of region to make IPM for original value given at command line.  */
  const char *ipmLeft_help; /* Left point in original image of region to make IPM for help description.  */
  int ipmRight_arg;	/* Right point in original image region to make IPM for.  */
  char * ipmRight_orig;	/* Right point in original image region to make IPM for original value given at command line.  */
  const char *ipmRight_help; /* Right point in original image region to make IPM for help description.  */
  int ipmBottom_arg;	/* Bottom point in original image region to make IPM for.  */
  char * ipmBottom_orig;	/* Bottom point in original image region to make IPM for original value given at command line.  */
  const char *ipmBottom_help; /* Bottom point in original image region to make IPM for help description.  */
  int ipmInterpolation_arg;	/* The method to use for IPM interpolation.  */
  char * ipmInterpolation_orig;	/* The method to use for IPM interpolation original value given at command line.  */
  const char *ipmInterpolation_help; /* The method to use for IPM interpolation help description.  */
  double lineWidth_arg;	/* width of line to detect in mm (in the world).  */
  char * lineWidth_orig;	/* width of line to detect in mm (in the world) original value given at command line.  */
  const char *lineWidth_help; /* width of line to detect in mm (in the world) help description.  */
  double lineHeight_arg;	/* height of line to detect in mm (in the world).  */
  char * lineHeight_orig;	/* height of line to detect in mm (in the world) original value given at command line.  */
  const char *lineHeight_help; /* height of line to detect in mm (in the world) help description.  */
  int kernelWidth_arg;	/* widht of kernel to use for filtering.  */
  char * kernelWidth_orig;	/* widht of kernel to use for filtering original value given at command line.  */
  const char *kernelWidth_help; /* widht of kernel to use for filtering help description.  */
  int kernelHeight_arg;	/* Height of kernel to use for filtering.  */
  char * kernelHeight_orig;	/* Height of kernel to use for filtering original value given at command line.  */
  const char *kernelHeight_help; /* Height of kernel to use for filtering help description.  */
  double lowerQuantile_arg;	/* lower quantile to use for thresholding the filtered image.  */
  char * lowerQuantile_orig;	/* lower quantile to use for thresholding the filtered image original value given at command line.  */
  const char *lowerQuantile_help; /* lower quantile to use for thresholding the filtered image help description.  */
  int localMaxima_arg;	/* whether to return local maxima or just the maximum.  */
  char * localMaxima_orig;	/* whether to return local maxima or just the maximum original value given at command line.  */
  const char *localMaxima_help; /* whether to return local maxima or just the maximum help description.  */
  int groupingType_arg;	/* type of grouping to use (default 0: HV lines).  */
  char * groupingType_orig;	/* type of grouping to use (default 0: HV lines) original value given at command line.  */
  const char *groupingType_help; /* type of grouping to use (default 0: HV lines) help description.  */
  double binarize_arg;	/* whether to binarize the thresholded image or use the raw values.  */
  char * binarize_orig;	/* whether to binarize the thresholded image or use the raw values original value given at command line.  */
  const char *binarize_help; /* whether to binarize the thresholded image or use the raw values help description.  */
  double detectionThreshold_arg;	/* threshold for line scores to declare as line.  */
  char * detectionThreshold_orig;	/* threshold for line scores to declare as line original value given at command line.  */
  const char *detectionThreshold_help; /* threshold for line scores to declare as line help description.  */
  int smoothScores_arg;	/* whether to smooth scores of lines detected or not.  */
  char * smoothScores_orig;	/* whether to smooth scores of lines detected or not original value given at command line.  */
  const char *smoothScores_help; /* whether to smooth scores of lines detected or not help description.  */
  double rMin_arg;	/* rMin for Hough transform (in pixels).  */
  char * rMin_orig;	/* rMin for Hough transform (in pixels) original value given at command line.  */
  const char *rMin_help; /* rMin for Hough transform (in pixels) help description.  */
  double rMax_arg;	/* rMax for Hough transform (in pixels).  */
  char * rMax_orig;	/* rMax for Hough transform (in pixels) original value given at command line.  */
  const char *rMax_help; /* rMax for Hough transform (in pixels) help description.  */
  double rStep_arg;	/* rStep for Hough transform (in pixels).  */
  char * rStep_orig;	/* rStep for Hough transform (in pixels) original value given at command line.  */
  const char *rStep_help; /* rStep for Hough transform (in pixels) help description.  */
  double thetaMin_arg;	/* thetaMin for Hough transform (in degrees).  */
  char * thetaMin_orig;	/* thetaMin for Hough transform (in degrees) original value given at command line.  */
  const char *thetaMin_help; /* thetaMin for Hough transform (in degrees) help description.  */
  double thetaMax_arg;	/* thetaMax for Hough transform (in degrees).  */
  char * thetaMax_orig;	/* thetaMax for Hough transform (in degrees) original value given at command line.  */
  const char *thetaMax_help; /* thetaMax for Hough transform (in degrees) help description.  */
  double thetaStep_arg;	/* thetaStep for Hough transform (in degrees).  */
  char * thetaStep_orig;	/* thetaStep for Hough transform (in degrees) original value given at command line.  */
  const char *thetaStep_help; /* thetaStep for Hough transform (in degrees) help description.  */
  double ipmVpPortion_arg;	/* Portion of IPM image height to add to y-coordinate of VP.  */
  char * ipmVpPortion_orig;	/* Portion of IPM image height to add to y-coordinate of VP original value given at command line.  */
  const char *ipmVpPortion_help; /* Portion of IPM image height to add to y-coordinate of VP help description.  */
  int getEndPoints_arg;	/* Get the endpoints of the line.  */
  char * getEndPoints_orig;	/* Get the endpoints of the line original value given at command line.  */
  const char *getEndPoints_help; /* Get the endpoints of the line help description.  */
  int group_arg;	/* group nearby lines or not (default 1: group).  */
  char * group_orig;	/* group nearby lines or not (default 1: group) original value given at command line.  */
  const char *group_help; /* group nearby lines or not (default 1: group) help description.  */
  double groupThreshold_arg;	/* Threshold for grouping nearby lines (default 10).  */
  char * groupThreshold_orig;	/* Threshold for grouping nearby lines (default 10) original value given at command line.  */
  const char *groupThreshold_help; /* Threshold for grouping nearby lines (default 10) help description.  */
  int ransac_arg;	/* use RANSAC (1) or not (0).  */
  char * ransac_orig;	/* use RANSAC (1) or not (0) original value given at command line.  */
  const char *ransac_help; /* use RANSAC (1) or not (0) help description.  */
  int ransacLineNumSamples_arg;	/* Number of samples to use for RANSAC.  */
  char * ransacLineNumSamples_orig;	/* Number of samples to use for RANSAC original value given at command line.  */
  const char *ransacLineNumSamples_help; /* Number of samples to use for RANSAC help description.  */
  int ransacLineNumIterations_arg;	/* Number of iterations to use for RANSAC.  */
  char * ransacLineNumIterations_orig;	/* Number of iterations to use for RANSAC original value given at command line.  */
  const char *ransacLineNumIterations_help; /* Number of iterations to use for RANSAC help description.  */
  int ransacLineNumGoodFit_arg;	/* Number of close points to consider a good line fit.  */
  char * ransacLineNumGoodFit_orig;	/* Number of close points to consider a good line fit original value given at command line.  */
  const char *ransacLineNumGoodFit_help; /* Number of close points to consider a good line fit help description.  */
  double ransacLineThreshold_arg;	/* Threshold to consider a point close.  */
  char * ransacLineThreshold_orig;	/* Threshold to consider a point close original value given at command line.  */
  const char *ransacLineThreshold_help; /* Threshold to consider a point close help description.  */
  double ransacLineScoreThreshold_arg;	/* Threshold for detected line scores.  */
  char * ransacLineScoreThreshold_orig;	/* Threshold for detected line scores original value given at command line.  */
  const char *ransacLineScoreThreshold_help; /* Threshold for detected line scores help description.  */
  int ransacLineBinarize_arg;	/* Whether to binarize image for RANSAC or not.  */
  char * ransacLineBinarize_orig;	/* Whether to binarize image for RANSAC or not original value given at command line.  */
  const char *ransacLineBinarize_help; /* Whether to binarize image for RANSAC or not help description.  */
  int ransacLineWindow_arg;	/* Half width to use for ransac window.  */
  char * ransacLineWindow_orig;	/* Half width to use for ransac window original value given at command line.  */
  const char *ransacLineWindow_help; /* Half width to use for ransac window help description.  */
  int ransacSplineNumSamples_arg;	/* Number of samples to use for RANSAC.  */
  char * ransacSplineNumSamples_orig;	/* Number of samples to use for RANSAC original value given at command line.  */
  const char *ransacSplineNumSamples_help; /* Number of samples to use for RANSAC help description.  */
  int ransacSplineNumIterations_arg;	/* Number of iterations to use for RANSAC.  */
  char * ransacSplineNumIterations_orig;	/* Number of iterations to use for RANSAC original value given at command line.  */
  const char *ransacSplineNumIterations_help; /* Number of iterations to use for RANSAC help description.  */
  int ransacSplineNumGoodFit_arg;	/* Number of close points to consider a good line fit.  */
  char * ransacSplineNumGoodFit_orig;	/* Number of close points to consider a good line fit original value given at command line.  */
  const char *ransacSplineNumGoodFit_help; /* Number of close points to consider a good line fit help description.  */
  double ransacSplineThreshold_arg;	/* Threshold to consider a point close.  */
  char * ransacSplineThreshold_orig;	/* Threshold to consider a point close original value given at command line.  */
  const char *ransacSplineThreshold_help; /* Threshold to consider a point close help description.  */
  double ransacSplineScoreThreshold_arg;	/* Threshold for detected line scores.  */
  char * ransacSplineScoreThreshold_orig;	/* Threshold for detected line scores original value given at command line.  */
  const char *ransacSplineScoreThreshold_help; /* Threshold for detected line scores help description.  */
  int ransacSplineBinarize_arg;	/* Whether to binarize image for RANSAC or not.  */
  char * ransacSplineBinarize_orig;	/* Whether to binarize image for RANSAC or not original value given at command line.  */
  const char *ransacSplineBinarize_help; /* Whether to binarize image for RANSAC or not help description.  */
  int ransacSplineWindow_arg;	/* Half width to use for ransac window.  */
  char * ransacSplineWindow_orig;	/* Half width to use for ransac window original value given at command line.  */
  const char *ransacSplineWindow_help; /* Half width to use for ransac window help description.  */
  int ransacSplineDegree_arg;	/* Degree of spline to use.  */
  char * ransacSplineDegree_orig;	/* Degree of spline to use original value given at command line.  */
  const char *ransacSplineDegree_help; /* Degree of spline to use help description.  */
  int ransacSpline_arg;	/* Whether to use splines.  */
  char * ransacSpline_orig;	/* Whether to use splines original value given at command line.  */
  const char *ransacSpline_help; /* Whether to use splines help description.  */
  int ransacLine_arg;	/* Whether to use lines.  */
  char * ransacLine_orig;	/* Whether to use lines original value given at command line.  */
  const char *ransacLine_help; /* Whether to use lines help description.  */
  float ransacSplineStep_arg;	/* Step to use when pixelzing spline in ransac.  */
  char * ransacSplineStep_orig;	/* Step to use when pixelzing spline in ransac original value given at command line.  */
  const char *ransacSplineStep_help; /* Step to use when pixelzing spline in ransac help description.  */
  float overlapThreshold_arg;	/* Overlap threshold to use for grouping of bounding boxes.  */
  char * overlapThreshold_orig;	/* Overlap threshold to use for grouping of bounding boxes original value given at command line.  */
  const char *overlapThreshold_help; /* Overlap threshold to use for grouping of bounding boxes help description.  */
  float localizeAngleThreshold_arg;	/* Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal).  */
  char * localizeAngleThreshold_orig;	/* Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *localizeAngleThreshold_help; /* Angle threshold used for localization (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int localizeNumLinePixels_arg;	/* Number of pixels to go in normal direction for localization.  */
  char * localizeNumLinePixels_orig;	/* Number of pixels to go in normal direction for localization original value given at command line.  */
  const char *localizeNumLinePixels_help; /* Number of pixels to go in normal direction for localization help description.  */
  float extendAngleThreshold_arg;	/* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendAngleThreshold_orig;	/* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendAngleThreshold_help; /* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendMeanDirAngleThreshold_arg;	/* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendMeanDirAngleThreshold_orig;	/* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendMeanDirAngleThreshold_help; /* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int extendLinePixelsTangent_arg;	/* Number of pixels to go in tangent direction for extending.  */
  char * extendLinePixelsTangent_orig;	/* Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendLinePixelsTangent_help; /* Number of pixels to go in tangent direction for extending help description.  */
  int extendLinePixelsNormal_arg;	/* Number of pixels to go in tangent direction for extending.  */
  char * extendLinePixelsNormal_orig;	/* Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendLinePixelsNormal_help; /* Number of pixels to go in tangent direction for extending help description.  */
  float extendContThreshold_arg;	/* Threhsold used for stopping the extending process (higher -> less extending).  */
  char * extendContThreshold_orig;	/* Threhsold used for stopping the extending process (higher -> less extending) original value given at command line.  */
  const char *extendContThreshold_help; /* Threhsold used for stopping the extending process (higher -> less extending) help description.  */
  int extendDeviationThreshold_arg;	/* Stop extending when number of deviating points exceeds this threshold.  */
  char * extendDeviationThreshold_orig;	/* Stop extending when number of deviating points exceeds this threshold original value given at command line.  */
  const char *extendDeviationThreshold_help; /* Stop extending when number of deviating points exceeds this threshold help description.  */
  int extendRectTop_arg;	/* Top point for extension bounding box.  */
  char * extendRectTop_orig;	/* Top point for extension bounding box original value given at command line.  */
  const char *extendRectTop_help; /* Top point for extension bounding box help description.  */
  int extendRectBottom_arg;	/* Bottom point for extension bounding box.  */
  char * extendRectBottom_orig;	/* Bottom point for extension bounding box original value given at command line.  */
  const char *extendRectBottom_help; /* Bottom point for extension bounding box help description.  */
  float extendIPMAngleThreshold_arg;	/* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendIPMAngleThreshold_orig;	/* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendIPMAngleThreshold_help; /* Angle threshold used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  float extendIPMMeanDirAngleThreshold_arg;	/* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal).  */
  char * extendIPMMeanDirAngleThreshold_orig;	/* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) original value given at command line.  */
  const char *extendIPMMeanDirAngleThreshold_help; /* Angle threshold from mean direction used for extending (cosine, 1: most restrictive, 0: most liberal) help description.  */
  int extendIPMLinePixelsTangent_arg;	/* Number of pixels to go in tangent direction for extending.  */
  char * extendIPMLinePixelsTangent_orig;	/* Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendIPMLinePixelsTangent_help; /* Number of pixels to go in tangent direction for extending help description.  */
  int extendIPMLinePixelsNormal_arg;	/* Number of pixels to go in tangent direction for extending.  */
  char * extendIPMLinePixelsNormal_orig;	/* Number of pixels to go in tangent direction for extending original value given at command line.  */
  const char *extendIPMLinePixelsNormal_help; /* Number of pixels to go in tangent direction for extending help description.  */
  float extendIPMContThreshold_arg;	/* Threhsold used for stopping the extending process (higher -> less extending).  */
  char * extendIPMContThreshold_orig;	/* Threhsold used for stopping the extending process (higher -> less extending) original value given at command line.  */
  const char *extendIPMContThreshold_help; /* Threhsold used for stopping the extending process (higher -> less extending) help description.  */
  int extendIPMDeviationThreshold_arg;	/* Stop extending when number of deviating points exceeds this threshold.  */
  char * extendIPMDeviationThreshold_orig;	/* Stop extending when number of deviating points exceeds this threshold original value given at command line.  */
  const char *extendIPMDeviationThreshold_help; /* Stop extending when number of deviating points exceeds this threshold help description.  */
  int extendIPMRectTop_arg;	/* Top point for extension bounding box.  */
  char * extendIPMRectTop_orig;	/* Top point for extension bounding box original value given at command line.  */
  const char *extendIPMRectTop_help; /* Top point for extension bounding box help description.  */
  int extendIPMRectBottom_arg;	/* Bottom point for extension bounding box.  */
  char * extendIPMRectBottom_orig;	/* Bottom point for extension bounding box original value given at command line.  */
  const char *extendIPMRectBottom_help; /* Bottom point for extension bounding box help description.  */
  int splineScoreJitter_arg;	/* Number of pixels to go around the spline to compute score.  */
  char * splineScoreJitter_orig;	/* Number of pixels to go around the spline to compute score original value given at command line.  */
  const char *splineScoreJitter_help; /* Number of pixels to go around the spline to compute score help description.  */
  float splineScoreLengthRatio_arg;	/* Ratio of spline length to use.  */
  char * splineScoreLengthRatio_orig;	/* Ratio of spline length to use original value given at command line.  */
  const char *splineScoreLengthRatio_help; /* Ratio of spline length to use help description.  */
  float splineScoreAngleRatio_arg;	/* Ratio of spline angle to use.  */
  char * splineScoreAngleRatio_orig;	/* Ratio of spline angle to use original value given at command line.  */
  const char *splineScoreAngleRatio_help; /* Ratio of spline angle to use help description.  */
  float splineScoreStep_arg;	/* Step to use for spline score computation.  */
  char * splineScoreStep_orig;	/* Step to use for spline score computation original value given at command line.  */
  const char *splineScoreStep_help; /* Step to use for spline score computation help description.  */
  int splineTrackingNumAbsentFrames_arg;	/* number of frames the track is allowed to be absent before deleting it.  */
  char * splineTrackingNumAbsentFrames_orig;	/* number of frames the track is allowed to be absent before deleting it original value given at command line.  */
  const char *splineTrackingNumAbsentFrames_help; /* number of frames the track is allowed to be absent before deleting it help description.  */
  int splineTrackingNumSeenFrames_arg;	/* number of frames before considering the track good.  */
  char * splineTrackingNumSeenFrames_orig;	/* number of frames before considering the track good original value given at command line.  */
  const char *splineTrackingNumSeenFrames_help; /* number of frames before considering the track good help description.  */
  float mergeSplineThetaThreshold_arg;	/* Angle threshold for merging splines (radians).  */
  char * mergeSplineThetaThreshold_orig;	/* Angle threshold for merging splines (radians) original value given at command line.  */
  const char *mergeSplineThetaThreshold_help; /* Angle threshold for merging splines (radians) help description.  */
  float mergeSplineRThreshold_arg;	/* R threshold (distance from origin) for merginn splines.  */
  char * mergeSplineRThreshold_orig;	/* R threshold (distance from origin) for merginn splines original value given at command line.  */
  const char *mergeSplineRThreshold_help; /* R threshold (distance from origin) for merginn splines help description.  */
  float mergeSplineMeanThetaThreshold_arg;	/* Mean Angle threshold for merging splines (radians).  */
  char * mergeSplineMeanThetaThreshold_orig;	/* Mean Angle threshold for merging splines (radians) original value given at command line.  */
  const char *mergeSplineMeanThetaThreshold_help; /* Mean Angle threshold for merging splines (radians) help description.  */
  float mergeSplineMeanRThreshold_arg;	/* Mean R threshold (distance from origin) for merginn splines.  */
  char * mergeSplineMeanRThreshold_orig;	/* Mean R threshold (distance from origin) for merginn splines original value given at command line.  */
  const char *mergeSplineMeanRThreshold_help; /* Mean R threshold (distance from origin) for merginn splines help description.  */
  float mergeSplineCentroidThreshold_arg;	/* Distance threshold between spline cetroids for merging.  */
  char * mergeSplineCentroidThreshold_orig;	/* Distance threshold between spline cetroids for merging original value given at command line.  */
  const char *mergeSplineCentroidThreshold_help; /* Distance threshold between spline cetroids for merging help description.  */
  int lineTrackingNumAbsentFrames_arg;	/* number of frames the track is allowed to be absent before deleting it.  */
  char * lineTrackingNumAbsentFrames_orig;	/* number of frames the track is allowed to be absent before deleting it original value given at command line.  */
  const char *lineTrackingNumAbsentFrames_help; /* number of frames the track is allowed to be absent before deleting it help description.  */
  int lineTrackingNumSeenFrames_arg;	/* number of frames before considering the track good.  */
  char * lineTrackingNumSeenFrames_orig;	/* number of frames before considering the track good original value given at command line.  */
  const char *lineTrackingNumSeenFrames_help; /* number of frames before considering the track good help description.  */
  float mergeLineThetaThreshold_arg;	/* Angle threshold for merging lines (radians).  */
  char * mergeLineThetaThreshold_orig;	/* Angle threshold for merging lines (radians) original value given at command line.  */
  const char *mergeLineThetaThreshold_help; /* Angle threshold for merging lines (radians) help description.  */
  float mergeLineRThreshold_arg;	/* R threshold (distance from origin) for merging lines.  */
  char * mergeLineRThreshold_orig;	/* R threshold (distance from origin) for merging lines original value given at command line.  */
  const char *mergeLineRThreshold_help; /* R threshold (distance from origin) for merging lines help description.  */
  int numStrips_arg;	/* Number of horizontal strips to divide the image to.  */
  char * numStrips_orig;	/* Number of horizontal strips to divide the image to original value given at command line.  */
  const char *numStrips_help; /* Number of horizontal strips to divide the image to help description.  */
  int checkSplines_arg;	/* Whtethet to check splines or not.  */
  char * checkSplines_orig;	/* Whtethet to check splines or not original value given at command line.  */
  const char *checkSplines_help; /* Whtethet to check splines or not help description.  */
  float checkSplinesCurvenessThreshold_arg;	/* Curveness Threshold for checking splines.  */
  char * checkSplinesCurvenessThreshold_orig;	/* Curveness Threshold for checking splines original value given at command line.  */
  const char *checkSplinesCurvenessThreshold_help; /* Curveness Threshold for checking splines help description.  */
  float checkSplinesLengthThreshold_arg;	/* Length Threshold for checking splines.  */
  char * checkSplinesLengthThreshold_orig;	/* Length Threshold for checking splines original value given at command line.  */
  const char *checkSplinesLengthThreshold_help; /* Length Threshold for checking splines help description.  */
  float checkSplinesThetaDiffThreshold_arg;	/* ThetaDiff Threshold for checking splines.  */
  char * checkSplinesThetaDiffThreshold_orig;	/* ThetaDiff Threshold for checking splines original value given at command line.  */
  const char *checkSplinesThetaDiffThreshold_help; /* ThetaDiff Threshold for checking splines help description.  */
  float checkSplinesThetaThreshold_arg;	/* ThetaThreshold Threshold for checking splines.  */
  char * checkSplinesThetaThreshold_orig;	/* ThetaThreshold Threshold for checking splines original value given at command line.  */
  const char *checkSplinesThetaThreshold_help; /* ThetaThreshold Threshold for checking splines help description.  */
  int checkIPMSplines_arg;	/* Whtethet to check IPM splines or not.  */
  char * checkIPMSplines_orig;	/* Whtethet to check IPM splines or not original value given at command line.  */
  const char *checkIPMSplines_help; /* Whtethet to check IPM splines or not help description.  */
  float checkIPMSplinesCurvenessThreshold_arg;	/* Curveness Threshold for checking splines.  */
  char * checkIPMSplinesCurvenessThreshold_orig;	/* Curveness Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesCurvenessThreshold_help; /* Curveness Threshold for checking splines help description.  */
  float checkIPMSplinesLengthThreshold_arg;	/* Length Threshold for checking splines.  */
  char * checkIPMSplinesLengthThreshold_orig;	/* Length Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesLengthThreshold_help; /* Length Threshold for checking splines help description.  */
  float checkIPMSplinesThetaDiffThreshold_arg;	/* ThetaDiff Threshold for checking splines.  */
  char * checkIPMSplinesThetaDiffThreshold_orig;	/* ThetaDiff Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesThetaDiffThreshold_help; /* ThetaDiff Threshold for checking splines help description.  */
  float checkIPMSplinesThetaThreshold_arg;	/* ThetaThreshold Threshold for checking splines.  */
  char * checkIPMSplinesThetaThreshold_orig;	/* ThetaThreshold Threshold for checking splines original value given at command line.  */
  const char *checkIPMSplinesThetaThreshold_help; /* ThetaThreshold Threshold for checking splines help description.  */
  float finalSplineScoreThreshold_arg;	/* Final Threshold for declaring a valid spline.  */
  char * finalSplineScoreThreshold_orig;	/* Final Threshold for declaring a valid spline original value given at command line.  */
  const char *finalSplineScoreThreshold_help; /* Final Threshold for declaring a valid spline help description.  */
  int useGroundPlane_arg;	/* Use groudn plane or not when sending to map.  */
  char * useGroundPlane_orig;	/* Use groudn plane or not when sending to map original value given at command line.  */
  const char *useGroundPlane_help; /* Use groudn plane or not when sending to map help description.  */
  int checkColor_arg;	/* Whether to check colors or not.  */
  char * checkColor_orig;	/* Whether to check colors or not original value given at command line.  */
  const char *checkColor_help; /* Whether to check colors or not help description.  */
  int checkColorWindow_arg;	/* Size of window to use.  */
  char * checkColorWindow_orig;	/* Size of window to use original value given at command line.  */
  const char *checkColorWindow_help; /* Size of window to use help description.  */
  int checkColorNumBins_arg;	/* Number of bins to use.  */
  char * checkColorNumBins_orig;	/* Number of bins to use original value given at command line.  */
  const char *checkColorNumBins_help; /* Number of bins to use help description.  */
  float checkColorNumYellowMin_arg;	/* Min ratio of yellow points.  */
  char * checkColorNumYellowMin_orig;	/* Min ratio of yellow points original value given at command line.  */
  const char *checkColorNumYellowMin_help; /* Min ratio of yellow points help description.  */
  float checkColorRGMin_arg;	/* Min RG diff.  */
  char * checkColorRGMin_orig;	/* Min RG diff original value given at command line.  */
  const char *checkColorRGMin_help; /* Min RG diff help description.  */
  float checkColorRGMax_arg;	/* Max RG diff.  */
  char * checkColorRGMax_orig;	/* Max RG diff original value given at command line.  */
  const char *checkColorRGMax_help; /* Max RG diff help description.  */
  float checkColorGBMin_arg;	/* Min GB diff.  */
  char * checkColorGBMin_orig;	/* Min GB diff original value given at command line.  */
  const char *checkColorGBMin_help; /* Min GB diff help description.  */
  float checkColorRBMin_arg;	/* Min RB diff.  */
  char * checkColorRBMin_orig;	/* Min RB diff original value given at command line.  */
  const char *checkColorRBMin_help; /* Min RB diff help description.  */
  float checkColorRBFThreshold_arg;	/* RBF Threshold.  */
  char * checkColorRBFThreshold_orig;	/* RBF Threshold original value given at command line.  */
  const char *checkColorRBFThreshold_help; /* RBF Threshold help description.  */
  int checkColorRBF_arg;	/* Whether to use RBF or not.  */
  char * checkColorRBF_orig;	/* Whether to use RBF or not original value given at command line.  */
  const char *checkColorRBF_help; /* Whether to use RBF or not help description.  */
  int ipmWindowClear_arg;	/* Whether to clear part of the IPM image.  */
  char * ipmWindowClear_orig;	/* Whether to clear part of the IPM image original value given at command line.  */
  const char *ipmWindowClear_help; /* Whether to clear part of the IPM image help description.  */
  int ipmWindowLeft_arg;	/* Left corrdinate of window to keep in IPM.  */
  char * ipmWindowLeft_orig;	/* Left corrdinate of window to keep in IPM original value given at command line.  */
  const char *ipmWindowLeft_help; /* Left corrdinate of window to keep in IPM help description.  */
  int ipmWindowRight_arg;	/* Left corrdinate of window to keep in IPM.  */
  char * ipmWindowRight_orig;	/* Left corrdinate of window to keep in IPM original value given at command line.  */
  const char *ipmWindowRight_help; /* Left corrdinate of window to keep in IPM help description.  */
  int checkLaneWidth_arg;	/* Whether to check lane width or not.  */
  char * checkLaneWidth_orig;	/* Whether to check lane width or not original value given at command line.  */
  const char *checkLaneWidth_help; /* Whether to check lane width or not help description.  */
  float checkLaneWidthMean_arg;	/* Mean of lane width to look for.  */
  char * checkLaneWidthMean_orig;	/* Mean of lane width to look for original value given at command line.  */
  const char *checkLaneWidthMean_help; /* Mean of lane width to look for help description.  */
  float checkLaneWidthStd_arg;	/* Std deviation of lane width to look for.  */
  char * checkLaneWidthStd_orig;	/* Std deviation of lane width to look for original value given at command line.  */
  const char *checkLaneWidthStd_help; /* Std deviation of lane width to look for help description.  */

  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int ipmWidth_given ;	/* Whether ipmWidth was given.  */
  int ipmHeight_given ;	/* Whether ipmHeight was given.  */
  int ipmTop_given ;	/* Whether ipmTop was given.  */
  int ipmLeft_given ;	/* Whether ipmLeft was given.  */
  int ipmRight_given ;	/* Whether ipmRight was given.  */
  int ipmBottom_given ;	/* Whether ipmBottom was given.  */
  int ipmInterpolation_given ;	/* Whether ipmInterpolation was given.  */
  int lineWidth_given ;	/* Whether lineWidth was given.  */
  int lineHeight_given ;	/* Whether lineHeight was given.  */
  int kernelWidth_given ;	/* Whether kernelWidth was given.  */
  int kernelHeight_given ;	/* Whether kernelHeight was given.  */
  int lowerQuantile_given ;	/* Whether lowerQuantile was given.  */
  int localMaxima_given ;	/* Whether localMaxima was given.  */
  int groupingType_given ;	/* Whether groupingType was given.  */
  int binarize_given ;	/* Whether binarize was given.  */
  int detectionThreshold_given ;	/* Whether detectionThreshold was given.  */
  int smoothScores_given ;	/* Whether smoothScores was given.  */
  int rMin_given ;	/* Whether rMin was given.  */
  int rMax_given ;	/* Whether rMax was given.  */
  int rStep_given ;	/* Whether rStep was given.  */
  int thetaMin_given ;	/* Whether thetaMin was given.  */
  int thetaMax_given ;	/* Whether thetaMax was given.  */
  int thetaStep_given ;	/* Whether thetaStep was given.  */
  int ipmVpPortion_given ;	/* Whether ipmVpPortion was given.  */
  int getEndPoints_given ;	/* Whether getEndPoints was given.  */
  int group_given ;	/* Whether group was given.  */
  int groupThreshold_given ;	/* Whether groupThreshold was given.  */
  int ransac_given ;	/* Whether ransac was given.  */
  int ransacLineNumSamples_given ;	/* Whether ransacLineNumSamples was given.  */
  int ransacLineNumIterations_given ;	/* Whether ransacLineNumIterations was given.  */
  int ransacLineNumGoodFit_given ;	/* Whether ransacLineNumGoodFit was given.  */
  int ransacLineThreshold_given ;	/* Whether ransacLineThreshold was given.  */
  int ransacLineScoreThreshold_given ;	/* Whether ransacLineScoreThreshold was given.  */
  int ransacLineBinarize_given ;	/* Whether ransacLineBinarize was given.  */
  int ransacLineWindow_given ;	/* Whether ransacLineWindow was given.  */
  int ransacSplineNumSamples_given ;	/* Whether ransacSplineNumSamples was given.  */
  int ransacSplineNumIterations_given ;	/* Whether ransacSplineNumIterations was given.  */
  int ransacSplineNumGoodFit_given ;	/* Whether ransacSplineNumGoodFit was given.  */
  int ransacSplineThreshold_given ;	/* Whether ransacSplineThreshold was given.  */
  int ransacSplineScoreThreshold_given ;	/* Whether ransacSplineScoreThreshold was given.  */
  int ransacSplineBinarize_given ;	/* Whether ransacSplineBinarize was given.  */
  int ransacSplineWindow_given ;	/* Whether ransacSplineWindow was given.  */
  int ransacSplineDegree_given ;	/* Whether ransacSplineDegree was given.  */
  int ransacSpline_given ;	/* Whether ransacSpline was given.  */
  int ransacLine_given ;	/* Whether ransacLine was given.  */
  int ransacSplineStep_given ;	/* Whether ransacSplineStep was given.  */
  int overlapThreshold_given ;	/* Whether overlapThreshold was given.  */
  int localizeAngleThreshold_given ;	/* Whether localizeAngleThreshold was given.  */
  int localizeNumLinePixels_given ;	/* Whether localizeNumLinePixels was given.  */
  int extendAngleThreshold_given ;	/* Whether extendAngleThreshold was given.  */
  int extendMeanDirAngleThreshold_given ;	/* Whether extendMeanDirAngleThreshold was given.  */
  int extendLinePixelsTangent_given ;	/* Whether extendLinePixelsTangent was given.  */
  int extendLinePixelsNormal_given ;	/* Whether extendLinePixelsNormal was given.  */
  int extendContThreshold_given ;	/* Whether extendContThreshold was given.  */
  int extendDeviationThreshold_given ;	/* Whether extendDeviationThreshold was given.  */
  int extendRectTop_given ;	/* Whether extendRectTop was given.  */
  int extendRectBottom_given ;	/* Whether extendRectBottom was given.  */
  int extendIPMAngleThreshold_given ;	/* Whether extendIPMAngleThreshold was given.  */
  int extendIPMMeanDirAngleThreshold_given ;	/* Whether extendIPMMeanDirAngleThreshold was given.  */
  int extendIPMLinePixelsTangent_given ;	/* Whether extendIPMLinePixelsTangent was given.  */
  int extendIPMLinePixelsNormal_given ;	/* Whether extendIPMLinePixelsNormal was given.  */
  int extendIPMContThreshold_given ;	/* Whether extendIPMContThreshold was given.  */
  int extendIPMDeviationThreshold_given ;	/* Whether extendIPMDeviationThreshold was given.  */
  int extendIPMRectTop_given ;	/* Whether extendIPMRectTop was given.  */
  int extendIPMRectBottom_given ;	/* Whether extendIPMRectBottom was given.  */
  int splineScoreJitter_given ;	/* Whether splineScoreJitter was given.  */
  int splineScoreLengthRatio_given ;	/* Whether splineScoreLengthRatio was given.  */
  int splineScoreAngleRatio_given ;	/* Whether splineScoreAngleRatio was given.  */
  int splineScoreStep_given ;	/* Whether splineScoreStep was given.  */
  int splineTrackingNumAbsentFrames_given ;	/* Whether splineTrackingNumAbsentFrames was given.  */
  int splineTrackingNumSeenFrames_given ;	/* Whether splineTrackingNumSeenFrames was given.  */
  int mergeSplineThetaThreshold_given ;	/* Whether mergeSplineThetaThreshold was given.  */
  int mergeSplineRThreshold_given ;	/* Whether mergeSplineRThreshold was given.  */
  int mergeSplineMeanThetaThreshold_given ;	/* Whether mergeSplineMeanThetaThreshold was given.  */
  int mergeSplineMeanRThreshold_given ;	/* Whether mergeSplineMeanRThreshold was given.  */
  int mergeSplineCentroidThreshold_given ;	/* Whether mergeSplineCentroidThreshold was given.  */
  int lineTrackingNumAbsentFrames_given ;	/* Whether lineTrackingNumAbsentFrames was given.  */
  int lineTrackingNumSeenFrames_given ;	/* Whether lineTrackingNumSeenFrames was given.  */
  int mergeLineThetaThreshold_given ;	/* Whether mergeLineThetaThreshold was given.  */
  int mergeLineRThreshold_given ;	/* Whether mergeLineRThreshold was given.  */
  int numStrips_given ;	/* Whether numStrips was given.  */
  int checkSplines_given ;	/* Whether checkSplines was given.  */
  int checkSplinesCurvenessThreshold_given ;	/* Whether checkSplinesCurvenessThreshold was given.  */
  int checkSplinesLengthThreshold_given ;	/* Whether checkSplinesLengthThreshold was given.  */
  int checkSplinesThetaDiffThreshold_given ;	/* Whether checkSplinesThetaDiffThreshold was given.  */
  int checkSplinesThetaThreshold_given ;	/* Whether checkSplinesThetaThreshold was given.  */
  int checkIPMSplines_given ;	/* Whether checkIPMSplines was given.  */
  int checkIPMSplinesCurvenessThreshold_given ;	/* Whether checkIPMSplinesCurvenessThreshold was given.  */
  int checkIPMSplinesLengthThreshold_given ;	/* Whether checkIPMSplinesLengthThreshold was given.  */
  int checkIPMSplinesThetaDiffThreshold_given ;	/* Whether checkIPMSplinesThetaDiffThreshold was given.  */
  int checkIPMSplinesThetaThreshold_given ;	/* Whether checkIPMSplinesThetaThreshold was given.  */
  int finalSplineScoreThreshold_given ;	/* Whether finalSplineScoreThreshold was given.  */
  int useGroundPlane_given ;	/* Whether useGroundPlane was given.  */
  int checkColor_given ;	/* Whether checkColor was given.  */
  int checkColorWindow_given ;	/* Whether checkColorWindow was given.  */
  int checkColorNumBins_given ;	/* Whether checkColorNumBins was given.  */
  int checkColorNumYellowMin_given ;	/* Whether checkColorNumYellowMin was given.  */
  int checkColorRGMin_given ;	/* Whether checkColorRGMin was given.  */
  int checkColorRGMax_given ;	/* Whether checkColorRGMax was given.  */
  int checkColorGBMin_given ;	/* Whether checkColorGBMin was given.  */
  int checkColorRBMin_given ;	/* Whether checkColorRBMin was given.  */
  int checkColorRBFThreshold_given ;	/* Whether checkColorRBFThreshold was given.  */
  int checkColorRBF_given ;	/* Whether checkColorRBF was given.  */
  int ipmWindowClear_given ;	/* Whether ipmWindowClear was given.  */
  int ipmWindowLeft_given ;	/* Whether ipmWindowLeft was given.  */
  int ipmWindowRight_given ;	/* Whether ipmWindowRight was given.  */
  int checkLaneWidth_given ;	/* Whether checkLaneWidth was given.  */
  int checkLaneWidthMean_given ;	/* Whether checkLaneWidthMean was given.  */
  int checkLaneWidthStd_given ;	/* Whether checkLaneWidthStd was given.  */

} ;

extern const char *LaneDetectorParserInfo_purpose;
extern const char *LaneDetectorParserInfo_usage;
extern const char *LaneDetectorParserInfo_help[];

int LaneDetectorParser (int argc, char * const *argv,
  struct LaneDetectorParserInfo *args_info);
int LaneDetectorParser2 (int argc, char * const *argv,
  struct LaneDetectorParserInfo *args_info,
  int override, int initialize, int check_required);
int LaneDetectorParser_file_save(const char *filename,
  struct LaneDetectorParserInfo *args_info);

void LaneDetectorParser_print_help(void);
void LaneDetectorParser_print_version(void);

void LaneDetectorParser_init (struct LaneDetectorParserInfo *args_info);
void LaneDetectorParser_free (struct LaneDetectorParserInfo *args_info);

int LaneDetectorParser_configfile (char * const filename,
  struct LaneDetectorParserInfo *args_info,
  int override, int initialize, int check_required);

int LaneDetectorParser_required (struct LaneDetectorParserInfo *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* LANEDETECTOROPT_H */
